'''

# import the required class for testing
>>> from importlib import import_module
>>> MyList = import_module('1-my_list').MyList

# test for valid inputs
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>
>>> issubclass(my_list.__class__, list)
True
>>> my_list = MyList()
>>> my_list
[]
>>> my_list.append(1)
>>> my_list
[1]
>>> my_list.append(6)
>>> my_list
[1, 6]
>>> my_list.append(2)
>>> my_list
[1, 6, 2]
>>> my_list.print_sorted()
[1, 2, 6]
>>> my_list = MyList((2, 6, 4, 5))
>>> my_list
[2, 6, 4, 5]
>>> my_list.print_sorted()
[2, 4, 5, 6]
>>> my_list = MyList([2, -1, -7, 9, 9, 100])
>>> my_list
[2, -1, -7, 9, 9, 100]
>>> my_list.print_sorted()
[-7, -1, 2, 9, 9, 100]
>>> my_list = MyList("yyel")
>>> my_list
['y', 'y', 'e', 'l']
>>> my_list.print_sorted()
['e', 'l', 'y', 'y']
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(None)
>>> my_list.append(2)
>>> my_list
[1, None, 2]

# test for invalid inputs
>>> try:
...    my_list = MyList(3, 3)
... except Exception as e:
...    print('[{}] {}'.format(e.__class__.__name__, e))
[TypeError] list expected at most 1 argument, got 2
>>> try:
...    my_list = MyList()
...    my_list.append(1)
...    my_list.append(None)
...    my_list.append(2)
...    my_list.print_sorted()
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] '<' not supported between instances of 'NoneType' and 'int'
>>> try:
...    my_list.print_sorted(2)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] print_sorted() takes 1 positional argument but 2 were given
>>> try:
...    my_list = MyList()
...    my_list.print_sorted()
... except Exception as e:
...    print('[{}] {}'.format(e.__class__.__name__, e))
[]
>>> try:
...    my_list = MyList([1, 5, 4, 8, 3])
...    my_list is my_list.print_sorted()
... except Exception as e:
...    print('[{}] {}'.format(e.__class__.__name__, e))
[1, 3, 4, 5, 8]
False

'''
